name: CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  python:
    name: Python SDK
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        working-directory: ./python
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run tests
        working-directory: ./python
        run: |
          pytest tests/ -v --cov=keyvalue --cov-report=term-missing

      - name: Lint
        working-directory: ./python
        run: |
          flake8 keyvalue/ --max-line-length=100
          black --check keyvalue/

  javascript:
    name: JavaScript/TypeScript SDK
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16, 18, 20]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        working-directory: ./javascript
        run: npm ci

      - name: Type check
        working-directory: ./javascript
        run: npm run typecheck

      - name: Run tests
        working-directory: ./javascript
        run: npm test

      - name: Build
        working-directory: ./javascript
        run: npm run build

  c:
    name: C SDK
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libcurl4-openssl-dev libjson-c-dev

      - name: Build
        working-directory: ./c
        run: make

      - name: Run tests
        working-directory: ./c
        run: make test

  go:
    name: Go SDK
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.21', '1.22']

    steps:
      - uses: actions/checkout@v3

      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Download dependencies
        working-directory: ./go
        run: go mod download

      - name: Run tests
        working-directory: ./go
        run: go test -v ./...

      - name: Build
        working-directory: ./go
        run: go build ./...

  rust:
    name: Rust SDK
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build
        working-directory: ./rust
        run: cargo build --verbose

      - name: Run tests
        working-directory: ./rust
        run: cargo test --verbose

      - name: Check formatting
        working-directory: ./rust
        run: cargo fmt -- --check

  curl:
    name: curl Examples
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Test scripts
        working-directory: ./curl
        run: |
          chmod +x run.sh
          # Smoke test - don't run full suite against production
          bash run.sh --help || true
